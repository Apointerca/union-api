FORMAT: 1A
HOST: http://apointer.ca

# API documentation for Union

# Group General
Please refer to [Decision Graph](http://clojure-liberator.github.io/liberator/assets/img/decision-graph.svg) for details.

## General HTTP status code
As HTTP status code contains a lot of information, here we demonstration some of them so we can use them directly in our response.

### 200
This is the most common status code. It basically means things are going well.
But usually it returns together with response body.
Mostly for `GET` request.

### 201
This status code indicates the requested resource has been created.
Response body should be returned together.
Mostly for `POST` request.

### 204
Similar to `200`, but nothing would come together with this status.
Mostly for `DELETE` and `PUT` requests.

## General HTTP status error code

To avoid redundent error code declaration, here we list all the default meaning of corresponding error code.
Please explicitly in each response if the response is different from what state here.

### 400
Malformed request, this request is reported.
### 401
This request is not authorized.
### 403
This request doesn't have permission to access the resource.
### 404
The target resource not found.
### 405
HTTP request method not found.
### 406
The request parameters and headers not acceptable.
Please change it according to documentation.
### 409
Usually happens when creating a resource that already exists.

# Data Structure

## Pagination (object)
+ pageNumber: `1` (number, required) - The current page number, start from `1`
+ pageSize: `10` (number, required) - The number of record in each page. The minimum size is `5`
+ totalPage: `3` (number, required) - The total number of pages, minimum is `1`

# Data Structure

### Check Availability Employee Response (object)
+ uid: `123` (number, required) - Id of employee
+ firstName: `Rugal` (string, required)
+ lastName: `Bernstein` (string, required)
+ title: `Junior Developer` (string, optional)
+ description: `This is description` (string, optional)
+ phone: `1231231234` (string, optional)
+ avatar: `http://localhost/path` (string, optional)

### Appointment Availability Response (object)
+ beginAt: `1521682344` (number, required) - Unix timestamp of appointment begin time
+ endAt: `1521682344` (number, required) - Unix timestamp of appointment end time
+ scid: `23` (number, required) - Id of Service Case
+ employee (Check Availability Employee Response, required) - The employee to carry on the service

### Hold Appointment Request (object)
+ beginAt: `1521682344` (number, required) - Unix timestamp of appointment begin time
+ scid: `23` (number, required) - Id of Service Case

### Hold Appointment Response (object)
+ aid: `23` (number, required) - Id of Appointment
+ scid: `23` (number, required) - Id of Service Case
+ beginAt: `1521682344` (number, required) - Unix timestamp of appointment begin time
+ endAt: `1521682344` (number, required) - Unix timestamp of appointment end time
+ status: `1` (number, required) - 0: Cancel, 1: Hold, 2:Confirm

### Confirm Appointment Request (object)
+ firstName: `Rugal` (string, required)
+ lastName: `Bernstein` (string, required)
+ email: `customer@email.com` (string, required)
+ phone: `1231231234` (string, optional)

### Get User Response (object)
+ uid: `23` (number, required) - Id of User
+ firstName: `Jasper` (string, required)
+ lastName: `Zhao` (string, required)
+ email: `employee@apointer.ca` (string, required)
+ phone: `4167895678` (string, optional)
+ avatar: `http://localhost/path` (string, optional)

### Get Customer Response (Get User Response)
+ credit: `0` (number, required) - Customer credit
+ registered: `true` (boolean, required) - If this is an registered customer

### Get Appointment Response (object)
+ aid: `23` (number, required) - Id of Appointment
+ beginAt: `1521682344` (number, required) - Unix timestamp of appointment begin time
+ endAt: `1521682344` (number, required) - Unix timestamp of appointment end time
+ service (Get Service Response, required) - The service for this appointment
+ employee (Get User Response, required) - The employee for this appointment
+ customer (Get Customer Response, required) - The customer for this appointment

### Get Full Appointment Service (object)
+ sid: `11` (number, required) - Id of service
+ name: `Special Service` (string, required)
+ price: `11.5` (number, required)
+ duration: `60` (number, required) - Service duration in minute unit

### Get Full Appointment Customer (object)
+ uid: `21` (number, required) - Id of employee
+ firstName: `Rugal` (string, required)
+ lastName: `Bernstein` (string, required)
+ email: `customer@mail.com` (string, required)

### Get Full Appointment Employee (object)
+ wid: `11` (number, required) - Id of workspace
+ uid: `21` (number, required) - Id of employee
+ name: `Special Service` (string, required)
+ price: `11.5` (number, required)
+ firstName: `Rugal` (string, required)
+ lastName: `Bernstein` (string, required)
+ title: `Senior dental` (string, required)
+ description: `This is description` (string, optional)

### Get Full Appointment Response (object)
+ aid: `23` (number, required) - Id of Appointment
+ beginAt: `1521682344` (number, required) - Unix timestamp of appointment begin time
+ endAt: `1521682344` (number, required) - Unix timestamp of appointment end time
+ status: `2` (number, required) - Appointment status, 0-CANCEL, 1-HOLD, 2-CONFIRM
+ note: `This is note` (string, optional)
+ service (Get Full Appointment Service, required)
+ employee (Get Full Appointment Employee, required)
+ customer (Get Full Appointment Customer, required)

# Group Appointment

## Check Appointment [/appointment{?serviceId,beginAt,employeeId}]

### Check Available Time [GET]
+ Parameters
    + serviceId: `999` (number, required) - Id of service
    + beginAt: `1521682344` (number, required) - Target time in `second` unit
    + employeeId: `123` (number, optional) - Id of employee

+ response 200 (application/json)
    + Attributes (object)
        + 1521682344 (array[Appointment Availability Response], fixed-type)
        + 1521692344 (array[Appointment Availability Response], fixed-type)

### Create and Hold Appointment [POST]

+ request
    + Attributes (Hold Appointment Request)

+ response 201 (application/json)
    + Attributes (Hold Appointment Response)

## Appointment API [/appointment/{aid}]

+ Parameters
    + aid: `999` (number, required) - Id of Appointment

### Cancel Appointment [DELETE]
Cancel a confirmed Appointment.

+ response 204
    + Body

+ response 304
If this appointment is not in `CONFIRM` status.

    + Body

### Confirm Appointment [PUT]
Confirm Appointment with corresponding customer information.  
In order for `Bloor` to deal with customer information, a header `Anonymous: true` is required.  

Since header information is only for customer creation, the request body is the actual information that we want to book appointment for.  
Hence always take care of request body.  


The order of deciding order is like this:  

1. If header includes `Authorization` token, Bloor will ignore others and only copy `uid` as `cid`
2. If no `Authorization` token, then `email` header is `required` to determine customer identity
    1. If customer exists, Bloor will pick up the existing customer `uid` as `cid`. In this case other headers will be ignored
    2. Otherwise, `firstName` and `lastName` are required so Bloor will create new `unregistered` customer and set `uid` as `cid`

+ Request
    + Attributes (Confirm Appointment Request)
    + Headers 

            Anonymous: true
            Authorization: Bearer ${jwt}
            email: ${email}
            firstName: ${firstName}
            lastName: ${lastName}
            phone: ${phone}

+ response 200 (application/json)
    + Attributes (Get Appointment Response)

+ response 304
If this appointment is already in `CONFIRM` status.

    + Body

### Get Appointment [GET]
Get Appointment with corresponding customer, employee and service information.

+ response 200 (application/json)
    + Attributes (Get Full Appointment Response)

## Find Appointment of Store [/store/{sid}/appointment{?beginAt,endAt}]

### Find Appointment [GET]

+ Parameters
    + sid: `45` (number, required) - Id of store
    + beginAt: `1521682344` (number, required) - Target time in `second` unit
    + endAt: `1521793344` (number, required) - Target time in `second` unit

+ response 200 (application/json)
    + Attributes (array[Get Full Appointment Response], fixed)

## Find Appointment of Customer [/customer/{uid}/appointment{?beginAt,endAt}]

### Find Appointment [GET]

+ Parameters
    + uid: `213` (number, required) - Id of customer
    + beginAt: `1521682344` (number, required) - Target time in `second` unit
    + endAt: `1521793344` (number, required) - Target time in `second` unit

+ response 200 (application/json)
    + Attributes (array[Get Full Appointment Response], fixed)

## Find Appointment of Store Customer [/store/{sid}/customer/{uid}/appointment{?beginAt,endAt}]

### Find Appointment [GET]

+ Parameters
    + sid: `321` (number, required) - Id of store
    + uid: `444` (number, required) - Id of customer
    + beginAt: `1521682344` (number, required) - Target time in `second` unit
    + endAt: `1521793344` (number, required) - Target time in `second` unit

+ response 200 (application/json)
    + Attributes (array[Get Full Appointment Response], fixed)
# Data Structure

### Get Business Response (object)
+ bid: `1` (number, required) - The Id of this business
+ name: `Rugal Dental Clinic` (string, required)
+ license: `123-3321-2123-3321` (string, required)
+ phone: `1234567890` (string, optional)
+ email: `test@email.com` (string, optional)
+ backgroundImage: `http://host/path` (string, optional) - The background image of this business
+ avatar: `http://host/path` (string, optional) - The avatar of this business
+ website: `http://host/path` (string, optional) - The URL of this business

### Save Business Request (object)
+ name: `Rugal Auto Service` (string, required)
+ license: `123-3321-2123-3321` (string, required)
+ uid: `13` (number, required) - The Uid of the business owner

### Update Business Request (object)
+ name: `Rugal Auto Service` (string, optional)
+ phone: `1234567890` (string, optional)
+ email: `test@email.com` (string, optional)
+ website: `http://host/path` (string, optional) - The URL of this business

### Create Store (object)
+ sid: `2` (number, required) - The Id of store
+ bid: `1` (number, required) - The Id of business associated with the store

### Get Stores (object)
+ sid: `2` (number, required) - The Id of store
+ name: `Rugal Automobile Yonge Finch shop` (string, optional)

# Group Business

## Business CRUD [/business/{id}]

### Get business by ID [GET]
+ Parameters
    + id: `1` (number, required) - ID of business

+ response 200 (application/json)
    + Attributes (Get Business Response)

### Update business by ID [PUT]
+ Parameters
    + id: `1` (number, required) - ID of business

+ request
    + Attributes (Update Business Request)

+ response 204
    + Body

### Save business [POST]
Create the business along with the first store and full permission workspace.  
This should only be called after verifying business information.  

+ request
    + Attributes (Save Business Request)

+ response 201 (application/json)
    + Attributes (Create Store)

## Store under Business Operation [/business/{id}/store]

### Get Store Under Business [GET]
+ Parameters
    + id: `1` (number, required) - ID of business

+ response 200 (application/json)
    + Attributes (array[Get Stores], fixed)

## Avatar Operation [/business/{id}/avatar]

### Update Business Avatar [POST]
Please use `name=file` and set the `filename` as the original file name.  
Do not forget to set the `Content-Type`.  

+ Parameters
    + id: `1` (number, required) - ID of business

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ response 201
    + Body

+ response 503
This means Aws S3 is down.  
    + Body
# Data Structure

### Get Simple Category (object)
+ cid: `10` (number, required) - The ID of category
+ name: `The test` (string, required) - The name of category

### Save Category Request (object)
+ name: `Medical Treatment` (string, required) - The name of category
+ description: `something here` (string, optional)
+ avatar: `http://host/path` (string, optional)
+ parentCid (number, optional) - The parent of this category. Null or blank value indicates this is a root category

### Get Category Response (object)
+ cid: `1` (number, required) - The ID of category
+ Include (Save Category Request)
+ children (array[Get Simple Category], fixed) - A list of sub-category under current category

# Group Category

## Category CRUD [/category/{id}]

### Get category by ID [GET]
+ Parameters
    + id: `12` (number, required) - ID of category

+ response 200 (application/json)
    + Attributes (Get Category Response)

## Root Category [/category]

### Get all root category [GET]

+ response 200 (application/json)
    + Attributes (array[Get Simple Category], fixed)

### Save category [POST]

+ request
    + Attributes (Save Category Request)

+ response 201 (application/json)
    + Attributes (Get Category Response)

# Data Structure

### Get Store Of Employee (object)
+ sid: `123` (number, required) - Identifier of store
+ url: `rugal-test-store` (string, required)
+ name: `Rugal Dental` (string, required) - The name of this store
+ permission: 1, 1, 2, 0, 1 (array[number], required) - The permission set of the employee in this store, index from 0 to 4 indicates `BUSINESS_INFO(0)`, `CALENDAR(1)`, `SERVICE(2)`, `CUSTOMER(3)`, `EMPLOYEE(4)` respectively. With `0` in the array means `No Permission`, `1` represents `Read-Only` and `2` is `Read-Write` permission.

### Upload Avatar Response (object)
+ avatar: `http://amazon.s3.com/avatar.img` (string, required) - The public Amazon S3 url to access an avatar

### Output Employee Response (object)
+ uid: 1 (number, required) - Id of an existing employee

### Get Employees Response (Output Employee Response)
+ Include Create Employee Request

### Create Employee Request (object)
+ firstName: `Jasper` (string, required) - The first name of the existing employee to be displayed at Summerhill
+ lastName: `Zhao` (string, required) - The last name of the existing employee to be displayed at Summerhill
+ email: `employee@apointer.ca` (string, required) - The work email of the existing employee to be displayed at Summerhill
+ phone: `4167895678` (string, optional) - The work phone number of the existing employee to be displayed at Summerhill
+ avatar: `http://amazon.s3.com/avatar.img` (string, optional) - The Amazon S3 public url to access the existing employee's work avatar
+ title: `Dr. Jasper` (string, required) - The work tile of the existing employee to be displayed at Summerhill
+ description: `Have 5 years experience` (string, required) - The work description of the existing employee to be displayed at Summerhill
+ showOnPage: 1 (number, required) - Whether display this employee at Summerhill (1 - display, 0 - not display)
+ permission: 2, 1, 1, 1, 1 (array[number], required) - The permission of the existing employee at Wellesley
+ services: 1, 2, 3, 4, 5, 6 (array[number], optional) - The list of ids of services an existing employee is able to offer at a particular store

### Update Employee Request (Output Employee Response)
+ firstName: `Jasper` (string, optional) - The new first name of this existing employee to be displayed at Summerhill
+ lastName: `Zhao` (string, optional) - The new last name of this existing employee to be displayed at Summerhill
+ email: `employee@apointer.ca` (string, optional) - The new work email of this existing employee to be displayed at Summerhill
+ phone: `4167895678` (string, optional) - The new work phone number of this existing employee to be displayed at Summerhill
+ avatar: `http://amazon.s3.com/avatar.img` (string, optional) - The Amazon S3 public url to access this existing employee's new work avatar
+ title: `Dr. Jasper` (string, optional) - The new work tile of this existing employee to be displayed at Summerhill
+ description: `Have 5 years experience` (string, optional) - The new work description of this existing employee to be displayed at Summerhill
+ showOnPage: 1 (number, optional) - The new status of whether display this employee at Summerhill (1 - display, 0 - not display)
+ permission: 2, 1, 1, 1, 1 (array[number], optional) - The new permission of this existing employee at Wellesley
+ services: 1, 2, 3, 4, 5, 6 (array[number], optional) - The new list of ids of services this existing employee is able to offer at a particular store

# Group Employee

## Employee Related Stores [/employee/store]

### List stores of employee [GET]
+ request

    + Headers

            uid: {uid}

+ response 200 (application/json)

    + Attributes (array[Get Store Of Employee], fixed)

## Service of Employee [/employee/{uid}/service]
+ Parameters

    + uid: `1` (number, required) - Id of user

### Get Service of Employee [GET]

+ response 200 (application/json)

    + Attributes (array[Get Service Case Response], fixed)

## Employees of Store [/stores/{sid}/employees]
+ Parameters

    + sid: 1 (number, required) - Id of a store

### Get Employees of a Store [GET]

+ response 200 (application/json)
Return the information details of all employees working at this store

    + Attributes (array[Get Employees Response], fixed)

+ response 404
No employees are found at this store or the requested store does not exist

    + Body

## New Employee of Store [/stores/{sid}/employee]
+ Parameters

    + sid: 1 (number, required) - Id of a store

### Create a New Employee at a Store [POST]

+ request (application/json)

    + Attributes (Create Employee Request)

+ response 201 (application/json)
Successfully created a new employee at the particular store and his/her information details are returned

    + Attributes (Get Employees Response)

+ response 404
The requested store does not exist

    + Body

+ response 409
The new employee already exists at this store

    + Body

+ response 500
The new employee failed to be created at Dundas. Therefore, Union also failed to create this new employee

    + Body

## Update and Delete Employee of Store [/stores/{sid}/employees/{uid}]
+ Parameters

    + sid: 1 (number, required) - The id of a store
    + uid: 1 (number, required) - The id of an employee

### Update an Employee at a Store [PUT]

+ request (application/json)

    + Attributes (Update Employee Request)

+ response 201 (application/json)
The information of the existing employee is updated and his/her new details are returned

    + Attributes (Get Employees Response)

+ response 404
No employee is found or the requested store does not exist

    + Body

### Delete an Employee at a Store [DELETE]

+ response 200 (application/json)
The given employee is deleted from the particular store and his/her old details are returned

    + Attributes (Get Employees Response)

+ response 404
No employee is found or the given store does not exist

    + Body

## Upload an Avatar for an Employee at a Store [/stores/{sid}/employees/{uid}/avatar]
+ Parameters

    + uid: 1 (number, required) - The id of an employee
    + sid: 1 (number, required) - The id of a store

### Upload Avatar [POST]
Please use `name=file` and set the `filename` as the original file name.  
Do not forget to set the `Content-Type`.

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ response 201 (application/json)
The avatar is successfully uploaded to Amazon S3

    + Attributes (Upload Avatar Response)

+ response 404
No employee is found or the given store does not exist

    + Body

+ response 503
The Amazon S3 is not working

    + Body

# Data Structure

### Output Image Response
+ gid: 1 (number, required) - The id of a gallery image
+ sid: 1 (number, required) - The id of a store
+ image: `https://s3.amazonaws.com/bucket/path/avatar.png` (string, required) - The public Amazon S3 url to access an image

# Group Gallery

## Store Gallery Add And Get [/stores/{sid}/gallery]
+ Parameters

    + sid: 1 (number, required) - The id of a store

### Upload An Image [POST]
Please use `name=file` and set the `filename` as the original file name.  
Do not forget to set the `Content-Type`. 

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)
The image is successfully uploaded

    + Attributes (Output Image Response)

+ Response 404
The requested store does not exist

    + Attributes (Output Image Response)

+ Response 503
The Amazon S3 is not working

    + Body

### Get All Images [GET]
Get all images of a particular store to be displayed in its gallery.

+ response 200 (application/json)

    + Attributes (array[Output Image Response], fixed-type)

+ response 404
The requested store does not exist

    + Body

## Store Gallery Delete [/gallery/{gid}]
+ Parameters

    + gid: 1 (number, required) - The id of a gallery image

### Delete an Image [DELETE]

+ response 200 (application/json)
The requested image is successfully deleted from this store

    + Attributes (Output Image Response)

+ response 404
 The requested image does not exist

    + Body

# Data Structure

### Update Review Request(object)
+ rating: 5 (number, optional) - The new rating for the existing review
+ comment: `This store has fantastic customer service.` (string, optional) - The new comment for the existing review
+ like: 5 (number, optional) - The new number of the likes for the existing review
+ unlike: 1 (number, optional) - The new number of the unlikes for the existing review

### Create Review Request(object)
+ rating: 1 (number, required) - The rating a customer puts for a new review
+ comment: `This store has fantastic customer service.` (string, required) - The comment a customer puts for a new review

### Output Review Response(object)
+ rid: 1 (number, required) - The id of an existing review
+ uid: 1 (number, required) - The id of the reviewer
+ firstName: `Jasper` (string, required) - The first name of the reviewer
+ lastName: `Zhao` (string, required) - The last name of the reviewer
+ email: `test@apointer.ca` (string, required) - The email of the reviewer
+ avatar: `https://s3.amazonaws.com/bucket/path/avatar.png` (string, optional) - The public Amazon S3 url to the avatar of the reviewer
+ rating: 5 (number, required) - The rating given by the reviewer
+ comment: `This store has fantastic customer service.` (string, required) - The comment given by the reviewer
+ like: 5 (number, optional) - The number of likes on this review
+ unlike: 1 (number, optional) - The number of unlikes on this review
+ createdAt: 1527358914 (number, optional) - The last created timestamp in seconds of this review
+ modifiedAt: 1527358998 (number, optional) - The last modified timestamp in seconds of this review

# Group Review

## Store Reviews Create And Get [/stores/{sid}/review]
+ Parameters

    + sid: 1 (number, required) - The id of a store

### Post A Review [POST]
+ request (application/json)

    + Attributes (Create Review Request)

    + Headers

            Authorization: Authorization-token

+ response 201 (application/json)
The review is successfully created and its information is returned

    + Attributes (Output Review Response)

+ response 401
The customer tries to post this review is not an authorized customer

    + Body

+ response 404
The particular store does not exist

    + Body

### Get All Reviews [GET]
+ response 200 (application/json)
All the reviews under the requested store are found and they are returned

    + Attributes (array[Output Review Response], fixed-type)

+ response 404
The requested store does not exist

    + Body

## Store Reviews Update [/review/{rid}]
+ Parameters

    + rid: 1 (number, required) - The id of a review

### Update A Review [PUT]
+ request (application/json)

    + Attributes (Update Review Request)

    + Headers

            Authorization: Authorization-token

+ response 201 (application/json)

    + Attributes (Output Review Response)

+ response 401
The customer tries to update this existing review is not an authorized customer

    + Body

+ response 403
The authorized customer tries to update someone else's review

    + Body

+ response 404
The given review cannot be found

    + Body

# Data Structure

### Service Base (object)
+ price: `29.99` (number, required) - The price of this service per hour
+ duration: `30` (number, required) - The duration of this service in minute
+ css: `color:FFFFFF` (string, optional) - The CSS of this service
+ status: `2` (number, optional) - The status of this service, `0 - Offline`, `1 - Readonly`, `2 - Online`
+ description: `This is description` (string, optional)
+ name: `This is name` (string, required)

### Save Service Request (object)
+ cid (number, required) - The category Id of this service
+ Include (Service Base)

### Update Service Request (object)
+ cid (number, optional) - The category Id of this service
+ price: `29.99` (number, optional) - The price of this service per hour
+ duration: `30` (number, optional) - The duration of this service in minute
+ css: `color:FFFFFF` (string, optional) - The CSS of this service
+ status: `2` (number, optional) - The status of this service, `0 - Offline`, `1 - Readonly`, `2 - Online`
+ description: `This is description` (string, optional)
+ name: `This is name` (string, optional)

### Get Service Response (object)
+ sid: `1` (number, required) - Identifier of service
+ name (string, required)
+ Include (Service Base)
+ cid (number, required) - The category Id of this service
+ storeId (number, required) - The store Id of this service

### Get Service Response With Employee (object)
+ Include (Get Service Response)
+ employees (array[Check Availability Employee Response], optional) - Employees that provide this service

# Group Service

## Service for Store [/store/{sid}/service{?withEmployee,permission}]

+ Parameters
    + sid: `1` (number, required) - Id of store

### Create Service for Store [POST]

+ request
    + Attributes (Save Service Request)

+ response 201 (application/json)
    + Attributes (Get Service Response)

### Get services under Store [GET]
+ Parameters
    + withEmployee: `false` (boolean, optional) - Whether to include employees basic information
        + Default: `false`
    + permission: `2` (number, optional) - The permission to search with
        + Default: `2`

+ response 200 (application/json)
    + Attributes (array[Get Service Response With Employee], fixed)

## Service Operation [/service/{sid}]

+ Parameters
    + sid: `1` (number, required) - Id of service

### Get Service [GET]

+ response 200 (application/json)
    + Attributes (Get Service Response)

### Update Service [PUT]
+ request
    + Attributes (Update Service Request)

+ response 200 (application/json)
    + Attributes (Get Service Response)

### Delete Service [DELETE]
This operation will only soft delete the service.

+ response 204
    + Body

# Data Structure

### Save Service Case Request (object)
+ uid: `1` (number, required) - Identifier of user
+ sid: `1` (number, required) - Identifier of service

### Get Service Case Response (object)
+ scid: `1` (number, required) - Identifier of service case
+ uid: `1` (number, required) - Identifier of user
+ serviceId: `1` (number, required) - Identifier of service

# Group Service Case

## Employee under Service [/service/{sid}/employee]
+ Parameters
    + sid: `1` (number, required) - Id of service

### Get Employee under Service [GET]

+ response 200 (application/json)
    + Attributes (array[Get Service Case Response], fixed)

## Service Case CRUD [/service-case/{scid}]

### Save Service Case for Employee [POST]

+ request (application/json)
    + Attributes (Save Service Case Request)

+ response 201 (application/json)
    + Attributes (Get Service Case Response)

### Delete Service Case [DELETE]

+ Parameters
    + scid: `1` (number, required) - Id of service case

+ response 204
    + Body

### Get Service Case [GET]

+ Parameters
    + scid: `1` (number, required) - Id of service case

+ response 200 (application/json)
    + Attributes (Get Service Case Response)

# Data Structure

### Create Shift Request(object)
+ uid: 1 (number, required) - The id of an existing employee
+ beginAt: 1527358914 (number, required) - The start time of the new shift
+ endAt: 1527359923 (number, required) - The end time of the new shift

### Update Shift Request(object)
+ beginAt: 1527358914 (number, required) - The new start time of an existing shift
+ endAt: 1527359923 (number, required) - The new end time of an existing shift

### Get Employee (object)
+ uid: 1 (number, required) - The id of an existing employee
+ firstName: Jasper (string, required) - The first name of an existing employee
+ lastName: Zhao (string, required) - The last name of an existing employee
+ title: Dentist (string, required) - The title of an existing employee

### Output Shift Response(object)
+ sid: 1 (number, required) - The id of an existing shift
+ beginAt: 1527358914 (number, required) - The start time of an existing shift
+ endAt: 1527359923 (number, required) - The end time of an existing shift
+ employee (Get Employee) - The information of an existing employee

# Group Shift

## Store Shift Create [/stores/{sid}/shift]
+ Parameters

    + sid: 1 (number, required) - The id of a store

### Create A Shift [POST]

+ request (application/json)

    + Attributes (Create Shift Request)

+ response 201 (application/json)
The new shift is successfully created and the information of the successfully created shift is returned

    + Attributes (Output Shift Response)

+ response 403
The new shift end time is smaller or equal to the start time

    + Body

+ response 404
The requested store or employee does not exist

    + Body

## Store Shift Get [/stores/{sid}/shift?beginat={beginAt}&endat={endAt}]
Get all shifts under a particular store between certain start time and end time

+ Parameters

    + sid: 1 (number, required) - The id of a store
    + beginAt: 1527358914 (number, required) - The start time of any shift
    + endAt: 1527359923 (number, required) - The end time of any shift

### Get Store All Shifts [GET]

+ response 200 (application/json)
All shifts under this store are found and their information is returned

    + Attributes (array[Output Shift Response], fixed-type)

+ response 403
The end time of any shift is smaller or equal to its start time

    + Body

+ response 404
The store does not exist or no employee is under this store

    + Body

## Store Shift Delete And Update [/shift/{sid}]
+ Parameters

    + sid: 1 (number, required) - The id of a shift

### Delete A Shift [DELETE]

+ response 200 (application/json)
The existing shift is successfully deleted and its information is returned

    + Attributes (Output Shift Response)

+ response 404
The shift does not exist

    + Body

### Update A Shift [PUT]

+ request (application/json)

    + Attributes (Update Shift Request)

+ response 201 (application/json)
The requested shift is successfully updated and its updated information is returned

    + Attributes (Output Shift Response)

+ response 403
The new shift end time is smaller/equal to the new start time

    + Body

+ response 404
The shift does not exist

    + Body

# Data Structure

### Update Address (object)
+ line1: `123 test rd` (string, optional)
+ line2: `special line` (string, optional)
+ city: `Toronto` (string, optional)
+ province: `Ontario` (string, optional)
+ country: `Canada` (string, optional)
+ zip: `X0X0X0` (string, optional)

### Address Response (object)
+ aid: `23` (number, required) - The Id of address
+ line1: `123 test rd` (string, required)
+ line2: `special line` (string, optional)
+ city: `Toronto` (string, required)
+ province: `Ontario` (string, required)
+ country: `Canada` (string, required)
+ zip: `X0X0X0` (string, required)
+ longitude: `12.34` (number, optional)
+ latitude: `21.43` (number, optional)

### Business Hour Response (object)
+ weekDay: `3` (number, required) - The day in one week, from `1` to `7` to indicate `Monday` to `Sunday`
+ beginAt: `915` (number, required) - The begin time of a day, from `0` to `2400` to indicate hour and minute
+ endAt: `1730` (number, required) - The begin time of a day, from `0` to `2400` to indicate hour and minute

### Get Store Response (object)
+ sid: `1` (number, required) - The Id of this Store
+ cid: `3` (number, required) - The category Id of this store
+ bid: `6` (number, required) - The business Id of this store
+ timezone: `-4` (number, required)
+ address (Address Response, required)
+ businessHours (array[Business Hour Response], fixed) - A list of business hour of this store, order by day of week
+ name: `Rugal Dental Clinic` (string, required)
+ url: `rugal-test-store` (string, required)
+ description: `This is description` (string, optional)
+ phone: `1234567890` (string, required)
+ email: `test@email.com` (string, required)
+ website: `http://host.com` (string, optional)

### Update Store Request (object)
+ cid: `3` (number, optional) - The category Id of this store
+ timezone: `-1` (number, optional)
+ address (Update Address, optional)
+ name: `Rugal Dental Clinic` (string, optional)
+ url: `rugal-test-shop` (string, optional) - A dash separated all lower case string, leave it null or stay it the same with previous one if you do not want to change it
+ description: `This is description` (string, optional)
+ phone: `1234567890` (string, optional)
+ email: `test@email.com` (string, optional)
+ website: `http://host.com` (string, optional)

### Update Business Hours Request (object)
+ businessHours (array[Business Hour Response], fixed)

# Group Store

## Get Store Details [/store{?sid,url}]

### Get by ID or URL [GET]

Either use `sid` or `url`.  

+ Parameters
    + sid: `1` (number, optional) - ID of Store
    + url: `rugal-test-store` (string, optional) - URL of Store

+ response 200 (application/json)
    + Attributes (Get Store Response)

## Update Store Details [/store/{sid}]

### Update by ID [PUT]
+ Parameters
    + sid: `1` (number, required) - ID of Store

+ request
    + Attributes (Update Store Request)

+ response 200
    + Attributes (Get Store Response)

+ response 303
This indicates the specified URL already exists, please choose another one
    + Body

+ response 400
This indicates the specified URL is not valid, please follow the format `[a-z0-9]+(-[a-z0-9]+)*`
    + Body


## Store under Business [/business/{bid}/store]
+ Parameters
    + bid: `1` (number, required) - ID of Business

### Create store under Business [POST]
+ response 201
    + Attributes (Create Store)

## Store Business Hour CRUD [/store/{id}/business-hour]

### Update Store Business Hour [POST]
+ Parameters
    + id: `1` (number, required) - ID of Store

+ request
    + Attributes (Update Business Hours Request)

+ response 204 (application/json)
    + Body

